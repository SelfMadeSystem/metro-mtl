---
import { getCollection } from "astro:content";
import Layout from "../../../layouts/Layout.astro";
import { getEntries, getEntry } from "astro:content";
import type { Station } from "../../../content.config";
import type { ReferenceDataEntry } from "astro:content";
import LinePill from "../../../components/LinePill";
import type { InferEntrySchema } from "astro:content";
import StationMap from "../../../components/StationMap";
import TransferSelector from "../../../components/TransferSelector";

interface Props {
  station: Station;
}

export async function getStaticPaths() {
  const stations = await getCollection("stations");
  return stations.map((station) => ({
    params: { id: station.id },
    props: { station: station.data },
  }));
}

const { station } = Astro.props;

async function nameOrId<T extends "stations" | "lines">(
  ref: ReferenceDataEntry<T>,
  cb?: (data: InferEntrySchema<T>) => string
): Promise<string>;
async function nameOrId<T extends "stations" | "lines">(
  ref: ReferenceDataEntry<T> | undefined,
  cb?: (data: InferEntrySchema<T>) => string
): Promise<string | null>;
async function nameOrId<T extends "stations" | "lines">(
  ref: ReferenceDataEntry<T> | undefined,
  cb?: (data: InferEntrySchema<T>) => string
) {
  if (!ref) return null;
  const entry = await getEntry(ref).catch(() => null);
  if (!entry) return ref.id;
  return cb ? cb(entry.data as InferEntrySchema<T>) : entry.data.name;
}

const transfers = await Promise.all(
  (station.transfers ?? []).map(async (transfer) => {
    return {
      ...transfer,
      from: (await getEntry(transfer.from)).data,
      to: (await getEntry(transfer.to)).data,
      fromDirection: await nameOrId<"stations">(
        transfer.fromDirection,
        (name) => `direction ${name.name}`
      ),
      toDirection: await nameOrId(
        transfer.toDirection,
        (name) => `direction ${name.name}`
      ),
      optimalBoarding: await nameOrId(
        transfer.optimalBoarding,
        (name) => `direction ${name.name}`
      ),
    };
  })
);

const exits = await Promise.all(
  (station.exits ?? []).map(async (exit) => {
    return {
      ...exit,
      optimalBoarding: await nameOrId(
        exit.optimalBoarding,
        ({ name }) => `direction ${name}`
      ),
    };
  })
);

const lines = await getEntries(station.lines);

// can't import directly, otherwise it breaks the build (out of memory)
const autour = `/svgs/${station.id}_autour.svg`;
const network = `/svgs/${station.id}_network.svg`;
const quartier = `/svgs/${station.id}_quartier.svg`;

const stmUrl = `https://www.stm.info/en/info/networks/metro/${encodeURIComponent(station.stmId ?? station.id)}`;
---

<Layout
  title={`${station.name} - Metro MTL`}
  description={`Information about ${station.name} metro station in Montreal, including maps and line connections.`}
>
  <div class="relative min-h-screen flex flex-col">
    <!-- Header Section -->
    <header class="bg-white shadow-lg border-b dark:bg-stm-black">
      <!-- Navigation -->
      <nav class="border-b shadow-md dark:bg-stm-dark">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3">
          <a
            href="/"
            class="inline-flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-200 dark:text-blue-400 dark:hover:text-blue-600"
          >
            <svg
              class="w-5 h-5 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Stations
          </a>
        </div>
      </nav>

      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <div
              class="w-3 h-8 rounded-full"
              style={lines.length === 1
                ? {
                    background: lines[0].data.color,
                  }
                : lines.length === 2
                  ? {
                      background: `linear-gradient(135deg, ${lines[0].data.color} 50%, ${lines[1].data.color} 50%)`,
                    }
                  : lines.length === 3
                    ? {
                        background: `linear-gradient(135deg, ${lines[0].data.color} 33%, ${lines[1].data.color} 33%, ${lines[1].data.color} 66%, ${lines[2].data.color} 66%)`,
                      }
                    : {}}
            >
            </div>
            <div>
              <h1
                class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white"
              >
                {station.name}
              </h1>
              <p class="text-gray-600 mt-1 dark:text-gray-300">
                Station de métro • Montreal Metro
              </p>
            </div>
          </div>

          <!-- Lines Section -->
          <div class="flex flex-col items-end">
            <span
              class="text-sm font-medium text-gray-500 mb-2 dark:text-gray-300"
              >Lines</span
            >
            <div class="flex flex-wrap gap-2 justify-end">
              {lines.map((line) => <LinePill line={line.data} />)}
            </div>
            <!-- Action Buttons -->
            <div class="mt-3 flex flex-wrap gap-2 justify-end">
              <a
                href={`/travel?start=${station.id}`}
                class="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200 dark:bg-stm-dark dark:border-none dark:text-white dark:hover:bg-stm-dark/70"
              >
                <svg
                  class="w-4 h-4 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                </svg>
                Travel from
              </a>
              <a
                href={`/travel?end=${station.id}`}
                class="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200 dark:bg-stm-dark dark:border-none dark:text-white dark:hover:bg-stm-dark/70"
              >
                <svg
                  class="w-4 h-4 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M7 16l-4-4m0 0l4-4m-4 4h18"></path>
                </svg>
                Travel to
              </a>
            </div>
            <!-- STM Link -->
            <a
              href={stmUrl}
              target="_blank"
              rel="noopener noreferrer"
              class="mt-3 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
            >
              <svg
                class="w-4 h-4 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                ></path>
              </svg>
              View on STM.info
            </a>
          </div>
        </div>
      </div>
    </header>

    <!-- Content Section -->
    <div class="bg-map w-full flex-grow">
      <main class="max-w-7xl w-full mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Transfers -->
        {
          transfers.length > 0 && (
            <TransferSelector transfers={transfers} client:load />
          )
        }
        <!-- Exits -->
        {
          exits.length > 0 && (
            <div class="mb-8">
              <h2 class="text-2xl font-semibold text-gray-900 mb-4 dark:text-white">
                Exits
              </h2>
              <ul class="list-disc list-inside space-y-2">
                {exits.map((exit) => (
                  <li class="text-gray-700 dark:text-gray-200">
                    <span class="font-medium">{exit.name}</span>
                    {exit.optimalBoarding && (
                      <span class="text-sm text-gray-500 dark:text-gray-300">
                        &nbsp;•{" "}
                        {exit.description ??
                          `Optimal boarding: ${exit.optimalBoarding}`}
                      </span>
                    )}
                  </li>
                ))}
              </ul>
            </div>
          )
        }
        <!-- Station Features -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          {
            station.accessible && (
              <div class="bg-white rounded-lg p-4 shadow-sm border border-green-200 dark:bg-green-900/30 dark:border-green-200/30">
                <div class="flex items-center space-x-3">
                  <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center dark:bg-green-800">
                    <svg
                      class="w-6 h-6 text-green-600 dark:text-green-400"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                  </div>
                  <div>
                    <h3 class="font-semibold text-gray-900 dark:text-white">
                      Accessible
                    </h3>
                    <p class="text-sm text-gray-600 dark:text-gray-300">
                      Wheelchair accessible
                    </p>
                  </div>
                </div>
              </div>
            )
          }
          {
            station.parking && (
              <div class="bg-white rounded-lg p-4 shadow-sm border border-blue-200 dark:bg-blue-900/30 dark:border-blue-200/30">
                <div class="flex items-center space-x-3">
                  <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center dark:bg-blue-800">
                    <svg
                      class="w-6 h-6 text-blue-600 dark:text-blue-400"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"
                      />
                    </svg>
                  </div>
                  <div>
                    <h3 class="font-semibold text-gray-900 dark:text-white">
                      Parking
                    </h3>
                    <p class="text-sm text-gray-600 dark:text-gray-300">
                      Parking available
                    </p>
                  </div>
                </div>
              </div>
            )
          }
        </div>
        <!-- Maps Section -->
        <div class="flex flex-col gap-8">
          <!-- Network Map -->
          <StationMap
            map={network}
            alt={`Network map at ${station.name} station`}
            title="To satisfy the TypeScript compiler"
            description="The actual slots are being passed, not these props"
            client:load
          >
            <Fragment slot="title">
              <svg
                class="w-6 h-6 text-green-600 mr-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"
                ></path>
              </svg>
              Network Connection
            </Fragment>
            <Fragment slot="description">
              Metro network view from {station.name}
            </Fragment>
          </StationMap>
          <!-- Around Station -->
          <StationMap
            map={autour}
            alt={`Map around ${station.name} station`}
            title="To satisfy the TypeScript compiler"
            description="The actual slots are being passed, not these props"
            client:load
          >
            <Fragment slot="title">
              <svg
                class="w-6 h-6 text-blue-600 mr-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                ></path>
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
              </svg>
              Around the Station
            </Fragment>
            <Fragment slot="description">
              Points of interest and amenities near {station.name}
            </Fragment>
          </StationMap>
          <!-- Neighborhood Map -->
          <StationMap
            map={quartier}
            alt={`Neighborhood map at ${station.name} station`}
            title="To satisfy the TypeScript compiler"
            description="The actual slots are being passed, not these props"
            client:load
          >
            <Fragment slot="title">
              <svg
                class="w-6 h-6 text-purple-600 mr-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"
                ></path>
              </svg>
              Neighborhood
            </Fragment>
            <Fragment slot="description">
              Local area and district around {station.name}
            </Fragment>
          </StationMap>
        </div>
      </main>
    </div>
  </div>
</Layout>
